
https://www.youtube.com/watch?v=996OiexHze0 - OAuth 2.0 and OpenID Connect (in plain English)

https://oauthdebugger.com/ 

**********************************************************************************************************************
*********************************************** OUATH 2.0 ************************************************************
**********************************************************************************************************************

This is for AUTHORISATION and not authentication. Think about this as WHAT you are allowed to see 
like if you are allowed to access like contacts in a system or can read from an API (a bit like CRUD operations). 
It's NOT about the user's details like email address etc - That's dealt with later in OIDC :-) 

This place where this data is stored is called the RESOURCE SERVER for some reason. The owner of this data is 
called the RESOURCE OWNER. 

This server that controls AUTHORISATION is called the AUTHORISATION SERVER. B2C, ForgeRock, OKTA, Facebook 
are examples of AUTHORISATION SERVERS. These servers issue AUTHORISATION CODES and ACCESS TOKENS. 

AUTHORISATION CODES are issued by the AUTHORISATION SERVER and these defines what the client can see. This 
definition of what can be seen is called a SCOPE. A scope can be things like 'contacts' or 'profile' or and 
data that the RESOURCE OWNER wishes to share. 

            Definitions:

            * RESOURCE OWNER - The owner of the data
            * CLIENT - The application that needs to access the data 
            * AUTHORSATION SERVER - The system that manages the authorisation like B2C 
            * AUTHORISATION CODE - The code returned to the CLIENT and doesn't do much. It needs to be swapped for an ACCESS TOKEN.     
            * RESOURCE SERVER - The system that holds the data like contact information. 
                (B2C is both the AUTHORISATION SERVER and RESOURCE SERVER as in manages access to the data that IT stores)
            * AUTHORISATION GRANT - The thing that proves that authorisation is given (CODE or TOKEN)
            * REDIRECT URL/CALLBACK - The URL that the AUTHORISATION SERVER sends the CODE or TOKEN back to within the CLIENT
            * ACCESS TOKEN - The 'key' that is given to the client to get into the data on the RESOURCE SERVER
            * ACCESS TOKEN 'SCOPE' - The permissions level allocated to the ACCESS TOKEN. Examples: Email.READ, Contacts.READ etc
            
            * FRONT CHANNEL - Browser to Server (Less secure and things can be seem on the query string)
                (Getting an AUTHORISATION CODE is FRONT CHANNEL Request as it's a GET request)
            * BACK CHANNEL - Server to Server communication where the code if hidden from the user (very secure)
                (To exchange a AUTHORISATION CODE for an ACCESS TOKEN happens on the BACK CHANNEL as the client app server makes this call 
                via a POST request and the browser is not involved)
                (Also - Any use of the ACCESS TOKEN is always made by the server via the back channel and NOT the browser)


************ Starting the flow: (The client app needs to be registered with AUTHORISATION Server in advance) ***************

You set this up in advance with the AUTHORISATION SERVER. You get a CLIENT ID and a CLIENT SECRET from it. 

STEP 1. FRONT CHANNEL REQUEST TO GET AN AUTHORISATION CODE: 

    GET https://accounts.google.com/o/oauth2/v2/auth? (note there is a URL for the code)
    client_id=abc123&
    redirect_uri=https://mycleintapp.com/callback&
    scope=contact&
    response_type=code

STEP 2. BACK CHANNEL REQUEST TO GET AN ACCESS TOKEN:

    POST https://www.googleapis.com/oauth2/v4/auth? (note there is a URL for the token)
    Content-Type: application/x-www-form-urlencoded

    code=oMafqnuwwnuwng42n983989nfn2ef0wffw3& 
    client_id=abc123&
    client_secret=n383j9jfj8jfj8j32rf3ff3&
    grant_type=authorization_code

RESPONSE:
{
    "access_token": "dgaderoovmemrnvreunvununenf9n9ffunewngugnuien",
    "expires_in": 3600,
    "token_type": "Bearer"
}

STEP 3. BACK CHANNEL REQUEST TO GET DATA USING ACCESS TOKEN:
    
    GET api.google.com/some/API
    Authorization: Bearer dgaderoovmemrnvreunvununenf9n9ffunewngugnuien (It's down the API system to verify the token)

************************************************************************************************************************

MORE ON AUTHORIZATION GRANTS:
-----------------------------

    AUTHORISATION CODE FLOW (CODE FLOW): Front channel + back channel (when both are available)
        Webapps and Mobile App use this

    IMPLICIT FLOW: Front channel only (when we need just then token and no back channel is available)
        'Just give the token, ignore code'. Examples - SPA in React apps where there is no backend server. 
        Would use RESPONSE_TYPE=token
        Not as secure as the token is exposed to the browser 


